<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on UltraFine</title>
    <link>/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on UltraFine</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2019, FanChen and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 25 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; 中的自定义类型转换</title>
      <link>/blogs/cpp_type_convertions/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/blogs/cpp_type_convertions/</guid>
      <description>为什么需要类型转换？比如你可能需要求一组整数的平均值，但这个结果可能不是整数。
自定义类型转换 我们可以提供自定义的转换函数。在你进行显式和隐式转换时，编译器就能通过它们知道你是怎样自定义这个类型转换的。
1 2 3 4 5  struct MyType { operator destination-type() const { // return 返回一个 destination-type 的值  } }    下面是一个实例:
Example 1 :
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  struct ReadOnlyValue { ReadOnlyValue(const int intValue, const std::string stringValue) : intVal{ intValue }, strVal{ stringValue } {}; operator int() const { return intVal; } operator std::string() const { return strVal; } private: const int intVal; const std::string strVal; }    operator int 函数定义了将 ReadOnlyValue 类型的变量转换为 int 类型时转换后的值，而且可以返回任何你需要的值。比如这里我们返回了属性 intVal，如果你愿意，也可以返回 intVal * 10。</description>
    </item>
    
  </channel>
</rss>